{
  "hash": "80ffd8c75284fdd735b513646cb2592e",
  "result": {
    "markdown": "---\ntitle: \"Part 3: Modelling with R\"\nauthor: Ver√≥nica Andreo\ndate: '2023-04-02'\nformat: \n  html: \n    code-tools: true\n    code-copy: true\n    code-fold: false\n---\n\n\n\n\nIn this third part of the studio, we'll use R to model *Aedes albopictus*\ndistribution in Northern Italy. For that, we need to connect to GRASS via\nthe `rgrass` package in order to read occurrence data and predictors. The \n*rgrass* package is developed by @rgrass and can be found at: \n<https://github.com/rsbivand/rgrass/>. See the vignette with explanations\nand examples at: <https://rsbivand.github.io/rgrass/>.\n\n## [**rgrass**](https://cran.r-project.org/web/packages/rgrass/index.html)\n\n- `initGRASS()`: starts a GRASS GIS session from R\n- `execGRASS()`: executes GRASS GIS commands \n- `gmeta()`: shows GRASS location metadata\n- `read_VECT()` and `read_RAST()`: read vector and raster maps from GRASS into R *terra* objects.\n- `write_VECT()` and `write_RAST()`: write R *terra* objects into the GRASS GIS database\n\n::: {.callout-note}\nPackage `terra` is developed by @terra and will eventually replace `raster`.\n:::\n\n## Usage\n\nGRASS GIS and R can be used together in two ways:\n\nA. Using [R within a GRASS GIS session](https://grasswiki.osgeo.org/wiki/R_statistics/rgrass7#R_within_GRASS), i.e. starting R (or RStudio) from GRASS terminal\n<br>\n\n- type `R` or `rstudio &` in the GRASS GIS terminal\n- load `rgrass` library\n- use `read_VECT()`, `read_RAST()` to read data from GRASS into R\n- access GRASS GIS modules and database through `execGRASS()`\n- write data (back) to GRASS database with `write_VECT()` and `write_RAST()`\n\n\n![](assets/img/studio/grass_terminal_calling_R.png){width=\"60%\" fig-align=\"center\"}\n\nB. Using [GRASS GIS within an R session](https://grasswiki.osgeo.org/wiki/R_statistics/rgrass7#GRASS_within_R), i.e. we connect to GRASS GIS database from within R (or RStudio).\n<br>\n\n- we need to start GRASS GIS with `initGRASS()` from R\n- we access GRASS GIS modules through `execGRASS()`\n- use `read_VECT()`, `read_RAST()`, `write_VECT()` and `write_RAST()` to read data from and to GRASS database\n\n::: {.callout-note}\n`rgrass` was originally intended to apply GRASS functions on data outside GRASS database; hence some prefer to create throw away locations\n:::\n\n![](assets/img/studio/grass_within_rstudio_session.png){width=\"70%\" fig-align=\"center\"}\n\n# Let's move to R\n\n### Load packages needed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rgrass)\nlibrary(sf)\nlibrary(terra)\nlibrary(raster)\nlibrary(mapview)\nlibrary(biomod2)\nlibrary(dismo)\nlibrary(usdm)\nlibrary(SDMtune)\nlibrary(zeallot)\n```\n:::\n\n\n### Initialize GRASS\n\nWe'll use **option B**, i.e., we'll launch GRASS, in a defined location and mapset, from R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# path to GRASS binaries (run `grass --config path`)\ngrassbin <- \"/usr/lib64/grass82\"\n# path to GRASS database\ngrassdata <- \"/home/veroandreo/grass_ncsu_2023/grassdata/\"\n# path to location\nlocation <- \"eu_laea\"\n# path to mapset\nmapset <- \"italy_LST_daily\"\n\n# start GRASS GIS from R\ninitGRASS(gisBase = grassbin, \n          home = tempdir(), \n          gisDbase = grassdata, \n          location = location, \n          mapset = mapset, \n          override = TRUE,\n          remove_GISRC= TRUE)\n```\n:::\n\n\n### Read vector data\n\nNow we read in the occurrence data and the background points hosted in GRASS, convert them to `sf` objects and display them with `mapview`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read vector layers\npresence <- st_as_sf(read_VECT(\"aedes_albopictus\"))\nbackground <- st_as_sf(read_VECT(\"background_points\"))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n#### Read raster data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List rasters by pattern\nworldclim <- execGRASS(\"g.list\", \n                       parameters = list(type = \"raster\", \n                                         pattern = \"worldclim*\"))\navg <- execGRASS(\"g.list\", \n                 parameters = list(type = \"raster\", \n                                   pattern = \"avg*\"))\nmedian <- execGRASS(\"g.list\", \n                    parameters = list(type = \"raster\", \n                                      pattern = \"median*\", \n                                      exclude = \"*[1-5]\"))\n\n# Concatenate map lists\nto_import <- c(attributes(worldclim)$resOut, \n               attributes(avg)$resOut, \n               attributes(median)$resOut)\n\n# Read raster layers\npredictors <- list()\nfor (i in to_import){ \n  predictors[i] <- raster(read_RAST(i)) }\n\n# Stack rasters\npredictors_r <- raster::stack(predictors)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Quick visualization in mapview\nmapview(predictors_r[['worldclim_bio01']]) + presence\n```\n:::\n\n\n#### Data preparation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Variables for models\nsp <- \"Aedes albopictus\"\npresence_coords <- st_coordinates(presence)\nbackground <- st_coordinates(background)\nenv <- predictors_r\n\n# Prepare data: SWD\ndata_sp <- prepareSWD(species = sp, \n                      p = presence_coords, \n                      a = background, \n                      env = env)\n\ndata_sp\n```\n:::\n\n\n### Define relevant variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseed=49\nperc_test = 0.2\nk = 4\nmethod=\"Maxent\"\ncor_th=0.7\nperm=10\n```\n:::\n\n\n### Create train and test datasets\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create training and test sets\nc(train_sp, test_sp) %<-% \n  trainValTest(data_sp, \n               test = perc_test,\n               only_presence = TRUE, \n               seed = seed)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_sp\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_sp\n```\n:::\n\n\n### Create folds for cross-validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create folds \nran_folds <- randomFolds(train_sp, \n                         k = k,\n                         only_presence = TRUE, \n                         seed = seed)\n```\n:::\n\n\n### Train a default Maxent model with CV\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train a full model\nfull_model_sp <- train(method = method,\n                       data = train_sp, \n                       folds = ran_folds)\n\nfull_model_sp\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npred_full_model <- predict(full_model_sp,\n                           data = env,\n                           type = \"cloglog\")\n\nmapview(pred_full_model)\n```\n:::\n\n\n### Variable selection: remove highly correlated variables \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare background locations to test correlation\nbg_sp <- prepareSWD(species = sp, \n                    a = background,\n                    env = env)\n\n# Remove variables with correlation higher than 0.7 \n# while accounting for the AUC\nvs_sp <- varSel(full_model_sp,\n                metric = \"auc\", \n                bg4cor = bg_sp, \n                cor_th = cor_th,\n                permut = perm)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvs_sp@data\n```\n:::\n\n\n### Remove less important variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove less important variables only if auc does not decrease\nreduc_var_sp <- reduceVar(vs_sp,\n                          th = 10, \n                          metric = \"auc\", \n                          test = TRUE, \n                          permut = perm, \n                          use_jk = TRUE)\n\nreduc_var_sp\n```\n:::\n\n\nWe need now to recreate SWD only with the selected variables to run the final \nmodel and make predictions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get only relevant variables from the reduced model\nretained_varnames <- names(reduc_var_sp@models[[1]]@data@data)\n\n# Subset raster stack\nenv <- subset(env, retained_varnames)\n\n# SWD with the selected vars\nsubset_train_sp <- prepareSWD(species = sp, \n                              p = presence,\n                              a = background,\n                              env = env)\n\nc(train_sp, test_sp) %<-% \n  trainValTest(subset_train_sp, \n               test = perc_test, \n               only_presence = TRUE, \n               seed = seed)\n```\n:::\n\n\n### Run the best model with the full train data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_model_sp <- train(method = method, \n                        data = train_sp,\n                        fc = reduc_var_sp@models[[1]]@model@fc,\n                        reg = reduc_var_sp@models[[1]]@model@reg)\n```\n:::\n\n\n### Make predictions with the final model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_sp_maxent <- predict(final_model_sp,\n                         data = env, \n                         type = \"cloglog\")\n\nmapview(map_sp_maxent)\n```\n:::\n\n\n### Write raster of final model predictions to GRASS \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_RAST(rast(map_sp_maxent), \n           \"Aedes_albopictus_maxent\", \n           flags = c(\"o\",\"overwrite\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexecGRASS(\"g.list\", parameters = list(type=\"raster\",\n                                      pattern=\"Aedes*\"))\n```\n:::\n\n\n### Model evaluation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# AUC\nauc_maxent <- auc(final_model_sp, test = test_sp)\nauc_maxent\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Threshold dependent evaluation\nth_maxent <- thresholds(final_model_sp, \n                        type = \"cloglog\", \n                        test = test_sp)\n\nknitr::kable(th_maxent, format = 'html', digits = 2)\n```\n:::\n\n\n### Variable importance in final model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvi_model_sp <- maxentVarImp(final_model_sp)\nvi_model_sp\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplotVarImp(vi_model_sp)\n```\n:::\n\n\n\n### Response curves in final model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_rp <- function(i){\n  plotResponse(reduc_var_sp, i)\n}\n\nplotlist <- lapply(retained_varnames, my_rp)\n\nlabels <- LETTERS[1:length(retained_varnames)]\n\nggpubr::ggarrange(plotlist = plotlist, labels = labels)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# close the mapset\nunlink_.gislock()\n```\n:::\n\n\n\n### Disclaimer\n\nThis is only a toy example and only the beginning...\n\n- other models to test\n- hyper-parameter tuning\n- ensemble modeling\n- model validation with independent data\n- uncertainty: where we can predict with confidence\n- many other relevant packages: \n  - [*dismo*](https://cran.r-project.org/web/packages/dismo/index.html), [*sdm*](https://cran.r-project.org/web/packages/sdm/index.html),  [*kuenm*](https://github.com/marlonecobos/kuenm), [*caret*](https://cran.r-project.org/web/packages/caret/index.html), [*CAST*](https://cran.r-project.org/web/packages/CAST/index.html), etc.\n\n## References\n\n:::{#refs}\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}