{
  "hash": "822b0b6f2b0d0bbc9faf163251ad4a1c",
  "result": {
    "markdown": "---\ntitle: \"Part 2: Modelling with R\"\nauthor: Ver√≥nica Andreo\nformat: \n  html: \n    code-tools: true\n    code-copy: true\n    code-fold: false\n---\n\n\n\n\n# Using Satellite Data for Species Distribution Modeling with GRASS GIS and R\n\nIn this third part of the studio, we'll use R to model *Aedes albopictus*\ndistribution in Northern Italy. For that, we need to connect to GRASS via\nthe `rgrass` package in order to read occurrence data and predictors.\n\n## [**rgrass**](https://cran.r-project.org/web/packages/rgrass/index.html)\n\n- `initGRASS()`: starts a GRASS GIS session from R\n- `execGRASS()`: executes GRASS GIS commands \n- `gmeta()`: shows GRASS location metadata\n- `read_VECT()` and `read_RAST()`: read vector and raster maps from GRASS into *terra* objects \n- `write_VECT()` and `write_RAST()`: write *terra* objects into GRASS GIS database\n\n\n### GRASS GIS and R can be used together in two ways:\n\nA. Using [R within a GRASS GIS session](https://grasswiki.osgeo.org/wiki/R_statistics/rgrass7#R_within_GRASS), i.e. starting R (or RStudio) from GRASS terminal\n<br>\n\n- type `R` or `rstudio &` in the GRASS GIS terminal\n- load `rgrass` library\n- use `read_VECT()`, `read_RAST()` to read data from GRASS into R\n- access GRASS GIS modules and database through `execGRASS()`\n- write data (back) to GRASS database with `write_VECT()` and `write_RAST()`\n\n<img src=\"assets/img/studio/grass_terminal_calling_R.png\" width=\"60%\">\n\n\nB. Using [GRASS GIS within an R session](https://grasswiki.osgeo.org/wiki/R_statistics/rgrass7#GRASS_within_R), i.e. we connect to GRASS GIS database from within R (or RStudio).\n<br>\n\n- we need to start GRASS GIS with `initGRASS()` from R\n- we access GRASS GIS modules through `execGRASS()`\n- use `read_VECT()`, `read_RAST()`, `write_VECT()` and `write_RAST()` to read data from and to GRASS database\n\n::: {.callout-note}\nOriginally intended to apply GRASS functions on data outside GRASS database; hence some prefer to create throw away locations\n:::\n\n<img src=\"assets/img/grass_within_rstudio_session.png\" width=\"80%\">\n\n\n# Let's move to R\n\n\n#### Option B: Close GRASS, open Rstudio and run:\n\n::: {.panel-tabset}\n\n## R code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rgrass7)\n\n# path to GRASS binaries (run `grass --config path`)\ngrassbin <- \"/usr/lib64/grass82\"\n# path to GRASS database\ngrassdata <- \"/home/veroandreo/grassdata/\"\n# path to location\nlocation <- \"eu_laea\"\n# path to mapset\nmapset <- \"italy_LST_daily\"\n\n# start GRASS GIS from R\ninitGRASS(gisBase = grassbin, \n          home = tempdir(), \n          gisDbase = grassdata, \n          location = location, \n          mapset = mapset, \n          override = TRUE)\n```\n:::\n\n\n## Output\n\n\n::: {.cell}\n\n:::\n\n:::\n\n#### Load other packages needed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(raster)\nlibrary(sf)\nlibrary(mapview)\nlibrary(biomod2)\n```\n:::\n\n\n#### Read vector data\n\n::: {.panel-tabset}\n\n## R code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use sf for vectors\nuse_sf()\n\n# Read vector layers\nAa_pres <- readVECT(\"aedes_albopictus\")\nbackground <- readVECT(\"background_points\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Quick visualization in mapview\nmapview(Aa_pres) + \n  mapview(background, col.regions=NA, cex=2)\n```\n:::\n\n\n## Map\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n#### Read raster data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use sp for rasters\nuse_sp()\n\n# List rasters by pattern\nworldclim <- execGRASS(\"g.list\", parameters = list(type = \"raster\", pattern = \"worldclim*\"))\navg <- execGRASS(\"g.list\", parameters = list(type = \"raster\", pattern = \"avg*\"))\nmedian <- execGRASS(\"g.list\", parameters = list(type = \"raster\", pattern = \"median*\", exclude = \"*[1-5]\"))\n\n# Concatenate map lists\nto_import <- c(attributes(worldclim)$resOut, \n               attributes(avg)$resOut, \n               attributes(median)$resOut)\n\n# Read raster layers\npredictors <- list()\nfor (i in to_import){ predictors[i] <- raster(readRAST(i)) }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Quick visualization in mapview\nmapview(predictors[['worldclim_bio01']]) + Aa_pres\n```\n:::\n\n\n\n#### Data preparation and formatting\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Response variable\nn_pres <- dim(Aa_pres)[1]\nn_backg <- dim(background)[1]\nspp_name <- 'Aedes.albopictus'\n\npres <- rep(1, n_pres)\nbackg <- rep(0, n_backg)\nmyResp <- c(pres, backg)\n\nmyRespXY <- rbind(st_coordinates(Aa_pres),\n\t\t          st_coordinates(background))\n\n# Explanatory variables\nmyExpl <- raster::stack(predictors)\nnames(myExpl)\n```\n:::\n\n\n#### Data preparation and formatting\n\n::: {.panel-tabset}\n\n## R code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Format data as required by biomod\nmyBiomodData <- BIOMOD_FormatingData(resp.var = myResp,\n                                     expl.var = myExpl,\n                                     resp.xy = myRespXY,\n                                     resp.name = spp_name)\n\n# Inspect data\nmyBiomodData\n\n# Plot data\nplot(myBiomodData)\n```\n:::\n\n\n## Output\n\n\n::: {.cell}\n\n:::\n\n\n## Plot\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n#### Set model(s) options\n\n::: {.panel-tabset}\n\n## R code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set model options\nmyBiomodOption <- BIOMOD_ModelingOptions(\n  MAXENT.Phillips = \n    list(path_to_maxent.jar = \"/home/veroandreo/software/maxent/maxent.jar\",\n         maximumiterations = 200,\n         lq2lqptthreshold = 100, \n         l2lqthreshold = 100))\n\n# Inspect all configs for MaxEnt\nmyBiomodOption@MAXENT.Phillips\n```\n:::\n\n\n## Output\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n#### Run model\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run model\nmyBiomodModelOut <- BIOMOD_Modeling(\n  myBiomodData,\n  models = c('MAXENT.Phillips'),  \n  models.options = myBiomodOption,\n  NbRunEval=5,     \n  DataSplit=80,\n  VarImport=10,\n  models.eval.meth = c('ROC','ACCURACY'),\n  SaveObj = TRUE,\n  rescal.all.models = FALSE,\n  do.full.models = FALSE,\n  modeling.id = paste(spp_name,\"Habitat_Suitability\",sep=\"_\"))\n\n# Inspect the model\nmyBiomodModelOut\n```\n:::\n\n\n\n#### Model evaluation\n\n::: {.panel-tabset}\n\n## R code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract evaluation data\nmyBiomodModelEval <- get_evaluations(myBiomodModelOut)\n\n# Accuracy\nmyBiomodModelEval[\"ACCURACY\",\"Testing.data\",,,]\n\n# ROC: Receiver-operator curve\nmyBiomodModelEval[\"ROC\",\"Testing.data\",,,]\n\n# Save run with max ROC\nmax_roc <- which.max(myBiomodModelEval[\"ROC\",\"Testing.data\",,,])\n```\n:::\n\n\n## Plot\n\n\n::: {.cell}\n\n:::\n\n:::\n\n#### Variable importance\n\n:::{.panel-tabset}\n\n## R code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Variable importance\nvi <- get_variables_importance(myBiomodModelOut)\n\n# Let's see the first part\nhead(vi[1:13,1, ,], n = 10L) %>% \n  knitr::kable(format = 'html')\n\n# ... and estimate the mean\nhead(apply(vi, c(1,2), mean)) %>% \n  knitr::kable(format = 'html')\n```\n:::\n\n\n## Output 1\n\n\n::: {.cell}\n\n:::\n\n\n## Output 2\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n#### Response curves\n\n::: {.panel-tabset}\n\n## R code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract model of interest\nAa_maxent <- BIOMOD_LoadModels(myBiomodModelOut, models = \"MAXENT.Phillips\")\n\n# Plot response curves\nresp_curves <- biomod2::response.plot2(models = Aa_maxent, \n                               Data = get_formal_data(myBiomodModelOut, \n                                                      \"expl.var\"),\n                               show.variables = get_formal_data(myBiomodModelOut,\n                                                                \"expl.var.names\"),\n                               do.bivariate = FALSE, \n                               fixed.var.metric = \"median\")\n```\n:::\n\n\n## Plot\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n#### Model predictions\n\n:::{.panel-tabset}\n\n## R code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set parameters for model projection\nmyBiomodProj <- BIOMOD_Projection(\n                modeling.output = myBiomodModelOut, \n                new.env = myExpl,                     \n                proj.name = \"current\", \n                selected.models = \"all\", \n                compress = FALSE, \n                build.clamping.mask = FALSE)\n\n# Obtain predictions\nmod_proj <- get_predictions(myBiomodProj)\n\n# Plot predicted model with highest ROC\nmapview(mod_proj[[max_roc]]) \n```\n:::\n\n\n## Map\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n#### Optionally, write data back to GRASS GIS\n\n::: {.panel-tabset}\n\n## R code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Export only one layer\ng <- as(mod_proj[[max_roc]], 'SpatialGridDataFrame')\nwriteRAST(g, \"maxent_albopictus\", flags = \"overwrite\")\n\n# Export all MaxEnt runs\nfor(i in seq_along(1:length(mod_proj@layers))){\n  writeRAST(as(mod_proj[[i]], 'SpatialGridDataFrame'), \n            paste0(\"maxent_albopictus_\", i, sep=\"\"), \n            flags = \"overwrite\")\n}\n\n# Check it's there\nexecGRASS(\"g.list\", parameters = list(type = \"raster\", \n                                      pattern = \"maxent*\"))\n```\n:::\n\n\n## Output\n\n\n::: {.cell highlight.output='true'}\n\n:::\n\n\n:::\n\n### Disclaimer\n\nThis is only a toy example and only the beginning...\n\n- other models to test\n- hyper-parameter tuning\n- variable selection and model selection\n- ensemble modeling\n- model validation with independent data\n- uncertainty: where we can predict with confidence\n- many other relevant packages: \n  - [*dismo*](https://cran.r-project.org/web/packages/dismo/index.html), [*sdm*](https://cran.r-project.org/web/packages/sdm/index.html), [*SDMtune*](https://cran.r-project.org/web/packages/SDMtune/index.html), [*kuenm*](https://github.com/marlonecobos/kuenm), [*caret*](https://cran.r-project.org/web/packages/caret/index.html), [*CAST*](https://cran.r-project.org/web/packages/CAST/index.html), etc.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}