---
title: "Using Satellite Data for Species Distribution Modeling with GRASS GIS and R"
author: Ver√≥nica Andreo
format: 
  html: 
    code-tools: true
    code-copy: true
    code-fold: false
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(eval = FALSE)
```


## [**rgrass**](https://cran.r-project.org/web/packages/rgrass/index.html)

- `initGRASS()`: starts a GRASS GIS session from R
- `execGRASS()`: executes GRASS GIS commands
- `gmeta()`: shows GRASS location metadata
- `read_VECT()` and `read_RAST()`: read vector and raster maps from GRASS into *terra* objects 
- `write_VECT()` and `write_RAST()`: write *terra* objects into GRASS GIS database


### GRASS GIS and R can be used together in two ways:

A. Using [R within a GRASS GIS session](https://grasswiki.osgeo.org/wiki/R_statistics/rgrass7#R_within_GRASS), i.e. starting R (or RStudio) from GRASS terminal
<br>

  - type `R` or `rstudio &` in the GRASS GIS terminal
  - load `rgrass` library
  - use `readVECT()`, `readRAST()` to read data from GRASS into R
  - access GRASS GIS modules and database through `execGRASS()`
  - write data (back) to GRASS database with `writeVECT()` and `writeRAST()`

<img src="assets/img/grass_terminal_calling_R.png" width="60%">


B. Using [GRASS GIS within an R session](https://grasswiki.osgeo.org/wiki/R_statistics/rgrass7#GRASS_within_R), i.e. we connect to GRASS GIS database from within R (or RStudio).
<br>

  - we need to start GRASS GIS with `initGRASS()` 
  - we access GRASS GIS modules through `execGRASS()` 

> Originally intended to apply GRASS functions on data outside GRASS DB; hence some prefer to create throw away locations


<img src="assets/img/grass_within_rstudio_session.png" width="80%">


# Let's move to R


#### Option B: Close GRASS, open Rstudio and run:

::: {.panel-tabset}

## R code

```{r grass_init, results='hide', message=FALSE}
library(rgrass7)

# path to GRASS binaries (run `grass --config path`)
myGRASS <- "/usr/lib64/grass82"
# path to GRASS database
myGISDbase <- "/home/veroandreo/grassdata/"
# path to location
myLocation <- "eu_laea"
# path to mapset
myMapset <- "italy_LST_daily"

# start GRASS GIS from R
initGRASS(gisBase = myGRASS, 
          home = tempdir(), 
          gisDbase = myGISDbase, 
          location = myLocation, 
          mapset = myMapset, 
          override = TRUE)
```

## Output

```{r ref.label='grass_init', echo=FALSE, size='tiny'}
# start GRASS GIS from R
initGRASS(gisBase = myGRASS, 
          home = tempdir(), 
          gisDbase = myGISDbase, 
          location = myLocation, 
          mapset = myMapset, 
          override = TRUE)
```

:::

#### Load other packages needed

```{r load_libraries}
library(raster)
library(sf)
library(mapview)
library(biomod2)
```

#### Read vector data

::: {.panel-tabset}

## R code

```{r read_vectors, message=FALSE, warning=FALSE, results='hide'}
# Use sf for vectors
use_sf()

# Read vector layers
Aa_pres <- readVECT("aedes_albopictus")
background <- readVECT("background_points")
```

```{r plot, message=FALSE, warning=FALSE, results='hide'}
# Quick visualization in mapview
mapview(Aa_pres) + 
  mapview(background, col.regions=NA, cex=2)
```

## Map

```{r ref.label='plot', warning=FALSE, echo=FALSE}
mapview(Aa_pres) + 
  mapview(background, color="black", col.regions="black", cex=2)
```

:::

#### Read raster data

```{r read_rasters, message=FALSE, warning=FALSE, results='hide'}
# Use sp for rasters
use_sp()

# List rasters by pattern
worldclim <- execGRASS("g.list", parameters = list(type = "raster", pattern = "worldclim*"))
avg <- execGRASS("g.list", parameters = list(type = "raster", pattern = "avg*"))
median <- execGRASS("g.list", parameters = list(type = "raster", pattern = "median*", exclude = "*[1-5]"))

# Concatenate map lists
to_import <- c(attributes(worldclim)$resOut, 
               attributes(avg)$resOut, 
               attributes(median)$resOut)

# Read raster layers
predictors <- list()
for (i in to_import){ predictors[i] <- raster(readRAST(i)) }
```


```{r quick_view, message=FALSE, warning=FALSE}
# Quick visualization in mapview
mapview(predictors[['worldclim_bio01']]) + Aa_pres
```


#### Data preparation and formatting

```{r data_prep1, message=FALSE, warning=FALSE, results='hide'}
# Response variable
n_pres <- dim(Aa_pres)[1]
n_backg <- dim(background)[1]
spp_name <- 'Aedes.albopictus'

pres <- rep(1, n_pres)
backg <- rep(0, n_backg)
myResp <- c(pres, backg)

myRespXY <- rbind(st_coordinates(Aa_pres),
		          st_coordinates(background))

# Explanatory variables
myExpl <- raster::stack(predictors)
names(myExpl)
```

#### Data preparation and formatting

::: {.panel-tabset}

## R code

```{r data_prep2, message=FALSE, warning=FALSE, results='hide', fig.show='hide'}
# Format data as required by biomod
myBiomodData <- BIOMOD_FormatingData(resp.var = myResp,
                                     expl.var = myExpl,
                                     resp.xy = myRespXY,
                                     resp.name = spp_name)

# Inspect data
myBiomodData

# Plot data
plot(myBiomodData)
```

## Output

```{r print_data_object, warning=FALSE, echo=FALSE}
# Inspect data
myBiomodData
```

## Plot

```{r plot_data_object, warning=FALSE, echo=FALSE, out.width='72%'}
par(mar=c(2,2,2,2))
plot(myBiomodData)
```

:::

#### Set model(s) options

::: {.panel-tabset}

## R code

```{r model_options, message=FALSE, warning=FALSE, results='hide'}
# Set model options
myBiomodOption <- BIOMOD_ModelingOptions(
  MAXENT.Phillips = 
    list(path_to_maxent.jar = "/home/veroandreo/software/maxent/maxent.jar",
         maximumiterations = 200,
         lq2lqptthreshold = 100, 
         l2lqthreshold = 100))

# Inspect all configs for MaxEnt
myBiomodOption@MAXENT.Phillips
```

## Output

```{r print_model_options, message=FALSE, warning=FALSE, echo=FALSE}
myBiomodOption@MAXENT.Phillips
```

:::

#### Run model

```{r model_run, message=FALSE, warning=FALSE, results='hide'}
# Run model
myBiomodModelOut <- BIOMOD_Modeling(
  myBiomodData,
  models = c('MAXENT.Phillips'),  
  models.options = myBiomodOption,
  NbRunEval=5,     
  DataSplit=80,
  VarImport=10,
  models.eval.meth = c('ROC','ACCURACY'),
  SaveObj = TRUE,
  rescal.all.models = FALSE,
  do.full.models = FALSE,
  modeling.id = paste(spp_name,"Habitat_Suitability",sep="_"))

# Inspect the model
myBiomodModelOut
```


#### Model evaluation

::: {.panel-tabset}

## R code

```{r model_eval, message=FALSE, warning=FALSE, results='hold'}
# Extract evaluation data
myBiomodModelEval <- get_evaluations(myBiomodModelOut)

# Accuracy
myBiomodModelEval["ACCURACY","Testing.data",,,]

# ROC: Receiver-operator curve
myBiomodModelEval["ROC","Testing.data",,,]

# Save run with max ROC
max_roc <- which.max(myBiomodModelEval["ROC","Testing.data",,,])
```

## Plot

```{r plot_model_eval, message=FALSE, warning=FALSE, echo=FALSE, out.width='60%'}
models_scores_graph(myBiomodModelOut, 
                    by = "cv_run", 
                    metrics = c("ROC", "ACCURACY"))
```
:::

#### Variable importance

:::{.panel-tabset}

## R code

```{r vi, message=FALSE, warning=FALSE, results='hide'}
# Variable importance
vi <- get_variables_importance(myBiomodModelOut)

# Let's see the first part
head(vi[1:13,1, ,], n = 10L) %>% 
  knitr::kable(format = 'html')

# ... and estimate the mean
head(apply(vi, c(1,2), mean)) %>% 
  knitr::kable(format = 'html')
```

## Output 1

```{r warning=FALSE, echo=FALSE}
head(vi[1:13,1, ,], n = 10L) %>% 
  knitr::kable(format = 'html')
```

## Output 2

```{r warning=FALSE, echo=FALSE}
head(apply(vi, c(1,2), mean), n = 10L) %>% 
  knitr::kable(format = 'html')
```

:::

#### Response curves

::: {.panel-tabset}

## R code

```{r response_curves, warning=FALSE, fig.show='hide'}
# Extract model of interest
Aa_maxent <- BIOMOD_LoadModels(myBiomodModelOut, models = "MAXENT.Phillips")

# Plot response curves
resp_curves <- biomod2::response.plot2(models = Aa_maxent, 
                               Data = get_formal_data(myBiomodModelOut, 
                                                      "expl.var"),
                               show.variables = get_formal_data(myBiomodModelOut,
                                                                "expl.var.names"),
                               do.bivariate = FALSE, 
                               fixed.var.metric = "median")
```

## Plot

```{r ref.label='response_curves', warning=FALSE, echo=FALSE, out.width='60%'}
resp_curves <- biomod2::response.plot2(models = Aa_maxent, 
                               Data = get_formal_data(myBiomodModelOut, "expl.var"),
                               show.variables = get_formal_data(myBiomodModelOut,
                                                                "expl.var.names"),
                               do.bivariate = FALSE, 
                               fixed.var.metric = "median")
```

:::

#### Model predictions

:::{.panel-tabset}

## R code

```{r model_projection, message=FALSE, warning=FALSE, results='hide'}
# Set parameters for model projection
myBiomodProj <- BIOMOD_Projection(
                modeling.output = myBiomodModelOut, 
                new.env = myExpl,                     
                proj.name = "current", 
                selected.models = "all", 
                compress = FALSE, 
                build.clamping.mask = FALSE)

# Obtain predictions
mod_proj <- get_predictions(myBiomodProj)

# Plot predicted model with highest ROC
mapview(mod_proj[[max_roc]]) 
```

## Map

```{r plot_model_proj, message=FALSE, warning=FALSE, echo=FALSE}
# Plot predicted model
mapview(mod_proj[[max_roc]]) + Aa_pres
```

:::

#### Optionally, write data back to GRASS GIS

::: {.panel-tabset}

## R code

```{r write_raster_grass, message=FALSE, warning=FALSE, results='hide'}
# Export only one layer
g <- as(mod_proj[[max_roc]], 'SpatialGridDataFrame')
writeRAST(g, "maxent_albopictus", flags = "overwrite")

# Export all MaxEnt runs
for(i in seq_along(1:length(mod_proj@layers))){
  writeRAST(as(mod_proj[[i]], 'SpatialGridDataFrame'), 
            paste0("maxent_albopictus_", i, sep=""), 
            flags = "overwrite")
}

# Check it's there
execGRASS("g.list", parameters = list(type = "raster", 
                                      pattern = "maxent*"))
```

## Output

```{r ref.label='write_raster_grass', message=FALSE, warning=FALSE, echo=FALSE, highlight.output = TRUE}
# Check it's there
execGRASS("g.list", parameters = list(type = "raster", 
                                      pattern = "maxent*")) 
```

:::

### Disclaimer

This is only a toy example and only the beginning...

- other models to test
- hyper-parameter tuning
- variable selection and model selection
- ensemble modeling
- model validation with independent data
- uncertainty: where we can predict with confidence
- many other relevant packages: 
  - [*dismo*](https://cran.r-project.org/web/packages/dismo/index.html), [*sdm*](https://cran.r-project.org/web/packages/sdm/index.html), [*SDMtune*](https://cran.r-project.org/web/packages/SDMtune/index.html), [*kuenm*](https://github.com/marlonecobos/kuenm), [*caret*](https://cran.r-project.org/web/packages/caret/index.html), [*CAST*](https://cran.r-project.org/web/packages/CAST/index.html), etc.
